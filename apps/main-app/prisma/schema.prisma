generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model document_embeddings {
  id        Int                   @id
  embedding Unsupported("vector")

  @@index([embedding])
}

model documents {
  id      Int    @id
  title   String
  content String
}

model hotels {
  id                String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  country_code      String                 @db.VarChar(10)
  country_name      String                 @db.VarChar(100)
  city_code         String                 @db.VarChar(10)
  city_name         String                 @db.VarChar(100)
  hotel_code        String?                @db.VarChar(100)
  hotel_name        String                 @db.VarChar(200)
  hotel_rating      String?                @db.VarChar(50)
  address           String?
  attractions       String?
  description       String?
  fax_number        String?                @db.VarChar(200)
  hotel_facilities  String?
  map_position      String?                @db.VarChar(100)
  phone_number      String?                @db.VarChar(100)
  pin_code          String?                @db.VarChar(30)
  hotel_website_url String?                @db.VarChar(255)
  embedding         Unsupported("vector")?
  metadata          Json?
  favorites         UserFavoriteHotels[]

  @@index([embedding], map: "hotels_embeddings_idx")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    country       String?   @db.VarChar(100)
    currency      String?   @db.VarChar(10)
    accounts      Account[]
    sessions      Session[]
    favorites     UserFavoriteHotels[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserFavoriteHotels {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId    String
    hotelId   String   @db.Uuid
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    hotel     hotels   @relation(fields: [hotelId], references: [id], onDelete: Cascade)

    @@unique([userId, hotelId])
}
